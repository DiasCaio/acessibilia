define("tiny_acessibilia/dialog",["exports","core/str","./common","./options","./insert","./ai_client"],(function(_exports,_str,_common,Options,Insert,AI){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}
/**
   * Tiny Acessibilia dialog (modal).
   *
   * @module      tiny_acessibilia/dialog
   * @copyright   2025
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.open=_exports.default=void 0,Options=_interopRequireWildcard(Options),Insert=_interopRequireWildcard(Insert),AI=_interopRequireWildcard(AI);const ACCEPT_MIME=["image/png","image/jpeg","image/webp","image/gif"],STR={dialogtitle:"dialogtitle",selectfile:"selectfile",generate:"generate",regenerate:"regenerate",insert:"insert",cancel:"cancel",altlabel:"altlabel",decorative:"decorative",error_nofile:"error_nofile",error_unsupported:"error_unsupported",error_ia:"error_ia",notice_privacy:"notice_privacy"},renderDropzoneHtml=strings=>{const acceptText=".png,.jpg,.jpeg,.webp,.gif".replace(/\./g,"").toUpperCase().replace(/,/g,", ");return'\n    <style>\n      .acessibilia-dz{border:2px dashed #c7c7c7;border-radius:6px;padding:16px;text-align:center;margin-bottom:12px}\n      .acessibilia-dz-inner{display:flex;flex-direction:column;gap:8px;align-items:center;justify-content:center}\n      .acessibilia-dz .mime{font-size:12px;color:#666;margin-top:-4px}\n      .acessibilia-preview{margin-top:8px;text-align:center}\n      .acessibilia-preview img{max-width:100%;max-height:220px;border-radius:4px}\n      .acessibilia-privacy{font-size:12px;color:#666;margin-top:6px}\n    </style>\n    <div class="acessibilia dz" data-acessibilia-root>\n      <div class="acessibilia-dz" data-dropzone>\n        <div class="acessibilia-dz-inner">\n          <p>'.concat(strings.selectfile,'</p>\n          <p class="mime">').concat(acceptText,'</p>\n          <button type="button" class="tox-button" data-file-button>').concat(strings.selectfile,'</button>\n          <input type="file" accept="').concat(".png,.jpg,.jpeg,.webp,.gif",'" data-file-input hidden />\n        </div>\n      </div>\n      <div class="acessibilia-preview" data-preview hidden>\n        <img alt="" data-preview-img />\n      </div>\n      <p class="acessibilia-privacy" data-privacy>').concat(strings.notice_privacy,"</p>\n    </div>\n  ")},refreshButtons=(api,state)=>{const canGenerate=!!state.file;api.setEnabled("generate",canGenerate),api.setEnabled("regenerate",!!state.generated&&canGenerate);const canInsert=!!state.file&&(!0===state.decorative||state.alt&&state.alt.trim().length>0);api.setEnabled("insert",canInsert)},bindDropzone=(root,onFile)=>{const dz=root.querySelector("[data-dropzone]"),fileBtn=root.querySelector("[data-file-button]"),fileInput=root.querySelector("[data-file-input]"),preview=root.querySelector("[data-preview]"),previewImg=root.querySelector("[data-preview-img]");let objectURL=null;const clearPreview=()=>{objectURL&&(URL.revokeObjectURL(objectURL),objectURL=null),previewImg.removeAttribute("src"),preview.hidden=!0},handleFiles=files=>{const file=files&&files[0];return file?(file=>file&&ACCEPT_MIME.includes(file.type))(file)?((file=>{clearPreview(),objectURL=URL.createObjectURL(file),previewImg.src=objectURL,preview.hidden=!1})(file),onFile(file),{ok:!0}):{error:"unsupported"}:{error:"nofile"}};fileBtn.addEventListener("click",(()=>fileInput.click())),fileInput.addEventListener("change",(e=>handleFiles(e.target.files)));const stop=e=>{e.preventDefault(),e.stopPropagation()};return["dragenter","dragover","dragleave","drop"].forEach((ev=>dz.addEventListener(ev,stop))),dz.addEventListener("drop",(e=>{var _e$dataTransfer;return handleFiles(null===(_e$dataTransfer=e.dataTransfer)||void 0===_e$dataTransfer?void 0:_e$dataTransfer.files)})),{destroy:()=>{clearPreview(),["dragenter","dragover","dragleave","drop"].forEach((ev=>dz.removeEventListener(ev,stop))),fileBtn.replaceWith(fileBtn.cloneNode(!0)),fileInput.replaceWith(fileInput.cloneNode(!0))}}},open=async editor=>{const strings=await(async()=>{const keys=Object.values(STR),vals=await Promise.all(keys.map((k=>(0,_str.getString)(k,_common.component)))),map={};return keys.forEach(((k,i)=>{map[k]=vals[i]})),map})(),state={file:null,alt:"",decorative:!1,generated:!1},body={type:"panel",items:[{type:"htmlpanel",html:renderDropzoneHtml(strings)},{type:"input",name:"alt",label:strings.altlabel},{type:"checkbox",name:"decorative",label:strings.decorative}]},api=editor.windowManager.open({title:strings.dialogtitle,size:"large",body:body,initialData:{alt:"",decorative:!1},buttons:[{type:"custom",name:"generate",text:strings.generate,primary:!1,disabled:!0},{type:"custom",name:"regenerate",text:strings.regenerate,primary:!1,disabled:!0},{type:"cancel",name:"cancel",text:strings.cancel},{type:"submit",name:"insert",text:strings.insert,primary:!0,disabled:!0}],onAction:async(apiRef,details)=>{if("generate"===details.name||"regenerate"===details.name){if(!state.file)return void editor.windowManager.alert(strings.error_nofile);apiRef.setEnabled("generate",!1),apiRef.setEnabled("regenerate",!1);const promptText=(null==Options?void 0:Options.getPrompt)&&Options.getPrompt(editor)||"",start=performance.now();try{let alt="";if(AI&&"function"==typeof AI.generateAlt){const res=await AI.generateAlt(editor,state.file,{prompt:promptText});alt=(null==res?void 0:res.alt)||""}else{const res=await(async()=>({alt:"Descrição automática gerada (exemplo)."}))();alt=(null==res?void 0:res.alt)||""}state.alt=alt,state.generated=!0,apiRef.setData({alt:state.alt})}catch(err){console.error("[tiny_acessibilia] IA error:",err),editor.windowManager.alert(strings.error_ia)}finally{apiRef.setEnabled("generate",!!state.file),apiRef.setEnabled("regenerate",!!state.file),refreshButtons(apiRef,state);Math.round(performance.now()-start)}}},onChange:(apiRef,change)=>{if("alt"===change.name&&(state.alt=apiRef.getData().alt||""),"decorative"===change.name){const{decorative:decorative}=apiRef.getData();state.decorative=!!decorative;const altValue=state.decorative?"":state.alt;state.alt=altValue,apiRef.setData({alt:altValue})}refreshButtons(apiRef,state)},onSubmit:async apiRef=>{if(state.file)if(state.decorative||state.alt&&0!==state.alt.trim().length)try{await Insert.uploadAndInsert(editor,state.file,state.alt,state.decorative),apiRef.close()}catch(err){console.error("[tiny_acessibilia] insert error:",err),editor.windowManager.alert(strings.error_ia)}else editor.windowManager.alert(strings.error_nofile);else editor.windowManager.alert(strings.error_nofile)},onClose:()=>{var _dzControls$destroy;null==dzControls||null===(_dzControls$destroy=dzControls.destroy)||void 0===_dzControls$destroy||_dzControls$destroy.call(dzControls)}}),container=document.querySelector(".tox-dialog [data-acessibilia-root]"),dzControls=bindDropzone(container,(file=>{state.file=file,refreshButtons(api,state)}));return refreshButtons(api,state),{close:()=>api.close(),destroy:()=>{var _dzControls$destroy2;null==dzControls||null===(_dzControls$destroy2=dzControls.destroy)||void 0===_dzControls$destroy2||_dzControls$destroy2.call(dzControls),api.close()}}};_exports.open=open;var _default={open:open};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=dialog.min.js.map