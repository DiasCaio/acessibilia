{"version":3,"file":"telemetry.min.js","sources":["../src/telemetry.js"],"sourcesContent":["// amd/src/telemetry.js\n// Telemetria do Acessibilia: ouve eventos, loga no console e (opcional) envia metadados ao servidor.\n\nimport Ajax from 'core/ajax';\nimport * as Options from './options';\nimport {component} from './common';\n\n// Deve existir em db/services.php apontando para classes/external/log_event.php.\nconst METHOD = 'tiny_acessibilia_log_event';\n\n// Nomes dos eventos do plugin (iguais aos disparados pelo diálogo/fluxo).\nconst EV = {\n  OPEN: 'acessibilia:open',\n  FILE_SELECTED: 'acessibilia:file:selected',\n  GENERATE_START: 'acessibilia:generate:start',\n  GENERATE_SUCCESS: 'acessibilia:generate:success',\n  GENERATE_ERROR: 'acessibilia:generate:error',\n  INSERT_START: 'acessibilia:insert:start',\n  INSERT_SUCCESS: 'acessibilia:insert:success',\n  INSERT_ERROR: 'acessibilia:insert:error',\n};\n\n// Sanitiza o payload para evitar envio de conteúdo sensível.\nconst sanitize = (payload = {}) => {\n  const out = {};\n  for (const [k, v] of Object.entries(payload)) {\n    const key = String(k).toLowerCase();\n    if (key.includes('alt') || key.includes('image') || key.includes('data')) continue;\n\n    const t = typeof v;\n    if (t === 'string') {\n      if (v.length > 500) continue;\n      out[k] = v;\n    } else if (t === 'number' || t === 'boolean') {\n      out[k] = v;\n    }\n    // objetos/funções/símbolos são ignorados para evitar JSON circular\n  }\n  return out;\n};\n\n\nconst send = (editor, event, payload = {}) => {\n  // Sempre loga no console (útil p/ depuração local).\n  // eslint-disable-next-line no-console\n  console.log('[acessibilia]', event, payload);\n\n  // Só envia ao servidor se estiver habilitado nas settings.\n  if (!Options.isLogsEnabled(editor)) {\n    return Promise.resolve();\n  }\n\n  const args = {\n    event,\n    component,\n    ts: Date.now(),\n    payload: JSON.stringify(sanitize(payload)), // tudo junto no campo payload\n    };\n\n  return Ajax.call([{ methodname: METHOD, args }])[0].catch(() => { /* silencia erros de telemetria */ });\n};\n\n// Anexa listeners no editor para todos os eventos do Acessibilia.\nexport const attach = (editor) => {\n  Object.values(EV).forEach((name) => {\n    editor.on(name, (e) => send(editor, name, e));\n  });\n};\n\nexport default { attach, EV };\n"],"names":["METHOD","EV","OPEN","FILE_SELECTED","GENERATE_START","GENERATE_SUCCESS","GENERATE_ERROR","INSERT_START","INSERT_SUCCESS","INSERT_ERROR","sanitize","payload","out","k","v","Object","entries","key","String","toLowerCase","includes","t","length","attach","editor","values","forEach","name","on","e","event","console","log","Options","isLogsEnabled","Promise","resolve","args","component","ts","Date","now","JSON","stringify","Ajax","call","methodname","catch","send"],"mappings":"gtCAQMA,OAAS,6BAGTC,GAAK,CACTC,KAAM,mBACNC,cAAe,4BACfC,eAAgB,6BAChBC,iBAAkB,+BAClBC,eAAgB,6BAChBC,aAAc,2BACdC,eAAgB,6BAChBC,aAAc,4BAIVC,SAAW,eAACC,+DAAU,SACpBC,IAAM,OACP,MAAOC,EAAGC,KAAMC,OAAOC,QAAQL,SAAU,OACtCM,IAAMC,OAAOL,GAAGM,iBAClBF,IAAIG,SAAS,QAAUH,IAAIG,SAAS,UAAYH,IAAIG,SAAS,QAAS,eAEpEC,SAAWP,KACP,WAANO,EAAgB,IACdP,EAAEQ,OAAS,IAAK,SACpBV,IAAIC,GAAKC,MACM,WAANO,GAAwB,YAANA,IAC3BT,IAAIC,GAAKC,UAINF,KAyBIW,OAAUC,SACrBT,OAAOU,OAAOxB,IAAIyB,SAASC,OACzBH,OAAOI,GAAGD,MAAOE,GAvBR,SAACL,OAAQM,WAAOnB,+DAAU,MAGrCoB,QAAQC,IAAI,gBAAiBF,MAAOnB,UAG/BsB,QAAQC,cAAcV,eAClBW,QAAQC,gBAGXC,KAAO,CACXP,MAAAA,MACAQ,UAAAA,kBACAC,GAAIC,KAAKC,MACT9B,QAAS+B,KAAKC,UAAUjC,SAASC,kBAG5BiC,cAAKC,KAAK,CAAC,CAAEC,WAAY9C,OAAQqC,KAAAA,QAAS,GAAGU,OAAM,SAMjCC,CAAKxB,OAAQG,KAAME,6CAI/B,CAAEN,OAAAA,OAAQtB,GAAAA"}