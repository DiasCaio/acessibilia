{"version":3,"file":"insert.min.js","sources":["../src/insert.js"],"sourcesContent":["// amd/src/insert.js\n// Responsável por fazer upload da imagem (draft area) e inserir <img> no editor.\n\nimport uploadFile from 'editor_tiny/uploader';\n\n/**\n * Faz upload do arquivo e insere <img> com alt.\n *\n * @param {TinyMCEEditor} editor\n * @param {File|Blob} file\n * @param {string} alt\n * @param {boolean} decorative - Se true, insere alt=\"\"\n * @returns {Promise<void>}\n */\nexport const uploadAndInsert = async (editor, file, alt, decorative = false) => {\n  // Mostra “loading” no Tiny\n  editor.setProgressState(true);\n\n  try {\n    // Envia ao repositório padrão do Moodle (draft area).\n    const url = await uploadFile(\n      editor,\n      'image',\n      file,\n      file?.name || 'image',\n      // Progress callback (0–100). Por ora só logamos; sem UI de progresso no MVP.\n      (pct) => { /* eslint-disable-next-line no-console */ console.log('[acessibilia] upload', pct, '%'); }\n    );\n\n    // Sanitiza atributos e monta o HTML final.\n    const encUrl = editor.dom.encode(url);\n    const encAlt = editor.dom.encode(decorative ? '' : (alt || ''));\n\n    const html = `<img src=\"${encUrl}\" alt=\"${encAlt}\">`;\n    editor.insertContent(html);\n  } finally {\n    editor.setProgressState(false);\n  }\n};\n\nexport default { uploadAndInsert };\n"],"names":["uploadAndInsert","async","editor","file","alt","decorative","setProgressState","url","name","pct","console","log","encUrl","dom","encode","encAlt","html","insertContent"],"mappings":"qRAcaA,gBAAkBC,eAAOC,OAAQC,KAAMC,SAAKC,mEAEvDH,OAAOI,kBAAiB,aAIhBC,UAAY,qBAChBL,OACA,QACAC,MACAA,MAAAA,YAAAA,KAAMK,OAAQ,SAEbC,MAAoDC,QAAQC,IAAI,uBAAwBF,IAAK,QAI1FG,OAASV,OAAOW,IAAIC,OAAOP,KAC3BQ,OAASb,OAAOW,IAAIC,OAAOT,WAAa,GAAMD,KAAO,IAErDY,yBAAoBJ,yBAAgBG,aAC1Cb,OAAOe,cAAcD,cAErBd,OAAOI,kBAAiB,2DAIb,CAAEN,gBAAAA"}