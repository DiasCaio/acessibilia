{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Acessibilia dialog (modal).\n *\n * @module      tiny_acessibilia/dialog\n * @copyright   2025\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport {component} from './common';\nimport * as Options from './options';\nimport * as Insert from './insert';\nimport * as AI from './ai_client';\n\n// Tipos aceitos no MVP (SVG fica para depois).\nconst ACCEPT_MIME = ['image/png', 'image/jpeg', 'image/webp', 'image/gif'];\nconst ACCEPT_ATTR = '.png,.jpg,.jpeg,.webp,.gif';\n\n// Chaves de string usadas aqui (mantemos local para não inflar o common.js).\nconst STR = {\n    dialogtitle: 'dialogtitle',\n    selectfile: 'selectfile',\n    generate: 'generate',\n    regenerate: 'regenerate',\n    insert: 'insert',\n    cancel: 'cancel',\n    altlabel: 'altlabel',\n    decorative: 'decorative',\n    error_nofile: 'error_nofile',\n    error_unsupported: 'error_unsupported',\n    error_ia: 'error_ia',\n    notice_privacy: 'notice_privacy',\n};\n\n// Util: cria elemento com classes\nconst el = (tag, className, attrs = {}) => {\n    const node = document.createElement(tag);\n    if (className) node.className = className;\n    Object.entries(attrs).forEach(([k, v]) => node.setAttribute(k, v));\n    return node;\n};\n\n// Gera UI HTML da dropzone + preview.\nconst renderDropzoneHtml = (strings) => {\n  const acceptText = ACCEPT_ATTR.replace(/\\./g, '').toUpperCase().replace(/,/g, ', ');\n  return `\n    <style>\n      .acessibilia-dz{border:2px dashed #c7c7c7;border-radius:6px;padding:16px;text-align:center;margin-bottom:12px}\n      .acessibilia-dz-inner{display:flex;flex-direction:column;gap:8px;align-items:center;justify-content:center}\n      .acessibilia-dz .mime{font-size:12px;color:#666;margin-top:-4px}\n      .acessibilia-preview{margin-top:8px;text-align:center}\n      .acessibilia-preview img{max-width:100%;max-height:220px;border-radius:4px}\n      .acessibilia-privacy{font-size:12px;color:#666;margin-top:6px}\n    </style>\n    <div class=\"acessibilia dz\" data-acessibilia-root>\n      <div class=\"acessibilia-dz\" data-dropzone>\n        <div class=\"acessibilia-dz-inner\">\n          <p>${strings.selectfile}</p>\n          <p class=\"mime\">${acceptText}</p>\n          <button type=\"button\" class=\"tox-button\" data-file-button>${strings.selectfile}</button>\n          <input type=\"file\" accept=\"${ACCEPT_ATTR}\" data-file-input hidden />\n        </div>\n      </div>\n      <div class=\"acessibilia-preview\" data-preview hidden>\n        <img alt=\"\" data-preview-img />\n      </div>\n      <p class=\"acessibilia-privacy\" data-privacy>${strings.notice_privacy}</p>\n    </div>\n  `;\n};\n\n\n// Carrega as strings usadas no diálogo.\nconst loadStrings = async () => {\n    const keys = Object.values(STR);\n    const vals = await Promise.all(keys.map((k) => getString(k, component)));\n    const map = {};\n    keys.forEach((k, i) => { map[k] = vals[i]; });\n    return map;\n};\n\n// Fallback para IA enquanto o ai_client não estiver implementado.\nconst fallbackGenerate = async () => ({ alt: 'Descrição automática gerada (exemplo).' });\n\n\n// Valida tipo de arquivo.\nconst isSupportedFile = (file) => file && ACCEPT_MIME.includes(file.type);\n\n// Atualiza habilitação dos botões conforme estado.\nconst refreshButtons = (api, state) => {\n    const canGenerate = !!state.file;\n    api.setEnabled('generate', canGenerate);\n    api.setEnabled('regenerate', !!state.generated && canGenerate);\n\n    // Inserir: requer alt não vazio OU decorativa marcada.\n    const canInsert = !!state.file && ((state.decorative === true) || (state.alt && state.alt.trim().length > 0));\n    api.setEnabled('insert', canInsert);\n};\n\n// Liga eventos da dropzone/input e devolve funções de controle.\nconst bindDropzone = (root, onFile) => {\n    const dz = root.querySelector('[data-dropzone]');\n    const fileBtn = root.querySelector('[data-file-button]');\n    const fileInput = root.querySelector('[data-file-input]');\n    const preview = root.querySelector('[data-preview]');\n    const previewImg = root.querySelector('[data-preview-img]');\n\n    let objectURL = null;\n\n    const clearPreview = () => {\n        if (objectURL) {\n            URL.revokeObjectURL(objectURL);\n            objectURL = null;\n        }\n        previewImg.removeAttribute('src');\n        preview.hidden = true;\n    };\n\n    const showPreview = (file) => {\n        clearPreview();\n        objectURL = URL.createObjectURL(file);\n        previewImg.src = objectURL;\n        preview.hidden = false;\n    };\n\n    const handleFiles = (files) => {\n        const file = files && files[0];\n        if (!file) return {error: 'nofile'};\n        if (!isSupportedFile(file)) return {error: 'unsupported'};\n        showPreview(file);\n        onFile(file);\n        return {ok: true};\n    };\n\n    // Clique para selecionar\n    fileBtn.addEventListener('click', () => fileInput.click());\n    fileInput.addEventListener('change', (e) => handleFiles(e.target.files));\n\n    // DnD\n    const stop = (e) => { e.preventDefault(); e.stopPropagation(); };\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((ev) => dz.addEventListener(ev, stop));\n    dz.addEventListener('drop', (e) => handleFiles(e.dataTransfer?.files));\n\n    return {\n        destroy: () => {\n            clearPreview();\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((ev) => dz.removeEventListener(ev, stop));\n            fileBtn.replaceWith(fileBtn.cloneNode(true)); // remove listeners\n            fileInput.replaceWith(fileInput.cloneNode(true));\n        },\n    };\n};\n\n/**\n * Abre o modal principal.\n * - Seleciona/arrasta imagem (em memória)\n * - Gera descrição (IA) — chama AI.generateAlt quando existir\n * - Edita alt, marca decorativa\n * - Insere (chama Insert.uploadAndInsert)\n *\n * @param {TinyMCEEditor} editor\n */\nexport const open = async (editor) => {\n    const strings = await loadStrings();\n\n    // Estado do diálogo (em memória)\n    const state = {\n        file: null,\n        alt: '',\n        decorative: false,\n        generated: false,\n    };\n\n    // Constrói o corpo do diálogo\n    const body = {\n        type: 'panel',\n        items: [\n            {type: 'htmlpanel', html: renderDropzoneHtml(strings)},\n            {type: 'input', name: 'alt', label: strings.altlabel},\n            {type: 'checkbox', name: 'decorative', label: strings.decorative},\n        ],\n    };\n\n    const api = editor.windowManager.open({\n        title: strings.dialogtitle,\n        size: 'large',\n        body,\n        initialData: {alt: '', decorative: false},\n        buttons: [\n            {type: 'custom', name: 'generate', text: strings.generate, primary: false, disabled: true},\n            {type: 'custom', name: 'regenerate', text: strings.regenerate, primary: false, disabled: true},\n            {type: 'cancel', name: 'cancel', text: strings.cancel},\n            {type: 'submit', name: 'insert', text: strings.insert, primary: true, disabled: true},\n        ],\n        onAction: async (apiRef, details) => {\n            if (details.name === 'generate' || details.name === 'regenerate') {\n                if (!state.file) {\n                    editor.windowManager.alert(strings.error_nofile);\n                    return;\n                }\n                // Desabilita botões enquanto gera.\n                apiRef.setEnabled('generate', false);\n                apiRef.setEnabled('regenerate', false);\n\n                // Obtém prompt/config do Options (quando disponível).\n                const promptText = (Options?.getPrompt && Options.getPrompt(editor)) || '';\n                const start = performance.now();\n\n                try {\n                    let alt = '';\n                    if (AI && typeof AI.generateAlt === 'function') {\n                        const res = await AI.generateAlt(editor, state.file, { prompt: promptText });\n                        alt = res?.alt || '';\n                    } else {\n                        const res = await fallbackGenerate();\n                        alt = res?.alt || '';\n                    }\n                    state.alt = alt;\n                    state.generated = true;\n                    apiRef.setData({ alt: state.alt });\n\n                } catch (err) {\n                    // eslint-disable-next-line no-console\n                    console.error('[tiny_acessibilia] IA error:', err);\n                    editor.windowManager.alert(strings.error_ia);\n                } finally {\n                    // Reabilita botões; “regenerate” habilita após 1ª geração.\n                    apiRef.setEnabled('generate', !!state.file);\n                    apiRef.setEnabled('regenerate', !!state.file);\n                    refreshButtons(apiRef, state);\n                    const ms = Math.round(performance.now() - start);\n                    // Eventos/telemetria serão tratados no telemetry.js (quando implementado).\n                    // editor.fire('acessibilia:generate:success', { ms, chars: state.alt.length });\n                }\n            }\n        },\n        onChange: (apiRef, change) => {\n            if (change.name === 'alt') {\n                state.alt = (apiRef.getData().alt || '');\n            }\n            if (change.name === 'decorative') {\n                const {decorative} = apiRef.getData();\n                state.decorative = !!decorative;\n                // Se decorativa, limpamos e desabilitamos o campo alt.\n                const altValue = state.decorative ? '' : state.alt;\n                state.alt = altValue;\n                apiRef.setData({alt: altValue});\n                // Tiny não tem disable por-campo diretamente; poderíamos alternar via redial,\n                // mas para o MVP manteremos apenas a validação no botão \"Inserir\".\n            }\n            refreshButtons(apiRef, state);\n        },\n        onSubmit: async (apiRef) => {\n            if (!state.file) {\n                editor.windowManager.alert(strings.error_nofile);\n                return;\n            }\n            // Regras de alt\n            if (!state.decorative && (!state.alt || state.alt.trim().length === 0)) {\n                // Força alt não vazio (MVP).\n                editor.windowManager.alert(strings.error_nofile); // Reaproveitamos; ideal: string específica.\n                return;\n            }\n            try {\n                // editor.fire('acessibilia:insert:start');\n                await Insert.uploadAndInsert(editor, state.file, state.alt, state.decorative);\n                // editor.fire('acessibilia:insert:success');\n                apiRef.close();\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.error('[tiny_acessibilia] insert error:', err);\n                editor.windowManager.alert(strings.error_ia);\n                // editor.fire('acessibilia:insert:error', { code: 'upload' });\n            }\n        },\n        onClose: () => {\n            dzControls?.destroy?.();// Cleanup se necessário (listeners da dropzone são removidos pelo retorno de bindDropzone).\n        },\n    });\n\n    // Após abertura, ligar a dropzone/inputs no HTMLPanel.\n    const container = document.querySelector('.tox-dialog [data-acessibilia-root]');\n    const dzControls = bindDropzone(container, (file) => {\n        state.file = file;\n        // editor.fire('acessibilia:file:selected', { mime: file.type, bytes: file.size });\n\n        // Ao selecionar arquivo, habilita “Gerar descrição”.\n        refreshButtons(api, state);\n    });\n\n    // Habilita/desabilita assim que abre (sem arquivo ainda).\n    refreshButtons(api, state);\n\n    // Retorna referência útil (opcional)\n    return {\n        close: () => api.close(),\n        destroy: () => {\n            dzControls?.destroy?.();\n            api.close();\n        },\n    };\n};\n\nexport default {open};\n"],"names":["ACCEPT_MIME","STR","dialogtitle","selectfile","generate","regenerate","insert","cancel","altlabel","decorative","error_nofile","error_unsupported","error_ia","notice_privacy","renderDropzoneHtml","strings","acceptText","replace","toUpperCase","refreshButtons","api","state","canGenerate","file","setEnabled","generated","canInsert","alt","trim","length","bindDropzone","root","onFile","dz","querySelector","fileBtn","fileInput","preview","previewImg","objectURL","clearPreview","URL","revokeObjectURL","removeAttribute","hidden","handleFiles","files","includes","type","isSupportedFile","createObjectURL","src","showPreview","ok","error","addEventListener","click","e","target","stop","preventDefault","stopPropagation","forEach","ev","dataTransfer","_e$dataTransfer","destroy","removeEventListener","replaceWith","cloneNode","open","async","keys","Object","values","vals","Promise","all","map","k","component","i","loadStrings","body","items","html","name","label","editor","windowManager","title","size","initialData","buttons","text","primary","disabled","onAction","apiRef","details","alert","promptText","Options","getPrompt","start","performance","now","AI","generateAlt","res","prompt","fallbackGenerate","setData","err","console","Math","round","onChange","change","getData","altValue","onSubmit","Insert","uploadAndInsert","close","onClose","dzControls","container","document"],"mappings":"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"}